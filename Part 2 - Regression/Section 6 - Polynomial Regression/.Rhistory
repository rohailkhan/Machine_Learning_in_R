library(faraway)
data(gala)
str(gala)
gfit<-lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacant, data=gala)
gfit<-lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data=gala)
summary(gfit)
gs<-summary(gfit)
gs$cov.unscaled
gfit$residuals
LungCapData <- read.table(file.choose(),header=T,sep = "/t")
LungCapData <- read.table(file.choose(),header=T,sep = "\t")
attach(LungCapData)
names(LungCapData)
class(Smoke)
levels(Smoke)
lm(LungCap ~ Age + Smoke)
summary(lm(LungCap ~ Age + Smoke))
table(Smoke)
relevel(Smoke)
table(Smoke)
relevel(Smoke,ref = "yes")
summary(lm(LungCap ~ Age + Smoke))
Smoke<-relevel(Smoke,ref = "yes")
summary(lm(LungCap ~ Age + Smoke))
xlo<--1.5
xhi<-9.5
n1=40
n2=50
n3=60
x1<-runif(n1,xlo,xhi)
x2<-runif(n2,xlo,xhi)
x3<-runif(n3,xlo,xhi)
sigma=0.6
e1=rnorm(n1,0,sigma)
e2=rnorm(n2,0,sigma)
e3=rnorm(n3,0,sigma)
a1 = 2; b1 = 1.5
a2 = 10; b2 = -1
a3 = -1; b3 = 0.5
y1=a1*x1 + b1
y2=a2*x2 + b2
y3=a3*x3 + b3
x<-round(c(x1,x2,x3),3)
y<-round(c(y1,y2,y3),3)
line<-c(rep(1,n1),rep(2,n2),rep(3,n3))
set.seed(150)
n=n1+n2+n3
ru=runif(n)
order=order(ru)
ord=order(ru)
head(x)
head(y)
head(line)
tail(line)
line
mydata=cbind(x,y,line)[ord,]
head(mydata)
ord
mydata=as.data.frame(mydata)
head(mydata)
plot(x~y,col=line)
mydata = as.data.frame(mydata)
mydata$Line = as.factor(mydata$line)
mydata = as.data.frame(mydata)
plot(x~y,col=line)
head(mydata)
mydata$Line = as.factor(mydata$line)
head(mydata)
mydata$line1 = as.numeric(mydata$line == 1)
head(mydata)
table(mydata$Line)
table(mydata$line1)
mydata$line1[mydata$Line==1]<-1
mydata$line1[mydata$Line==0]<-0
table(mydata$line1)
head(mydata)
dim(mydata)
mydata$line1 = as.numeric(mydata$line == 1)
mydata$line2 = as.numeric(mydata$line == 2)
mydata$line3 = as.numeric(mydata$line == 3)
head(mydata)
newdata<-mydata[,c(2,1,4:6)]
head(newdata)
getwd()
setwd("E:/AUT Advanced Topics in Analytics Sem 1, 2019/Week 2")
gw=read.csv('grounddata.csv')
gw=read.csv('groundwater.csv')
View(gw)
gw=transform(gw,pol=ytce/N)
plot(pol_nitrate,data=gw)
plot(pol~nitrate,data=gw)
levels(gw$landuse)
boxplot(pol ~ landuse, data=gw)
levels(gw$landuse)
boxplot(pol ~ sewer, data=gw)
lm_all = lm(pol ~ landuse + sewer + nitrate + chloride, data=gw)
summary(lm_all)
lm_all = lm(pol ~ sewer + nitrate +landuse  + chloride, data=gw)
summary(lm_all)
lm_all1 = lm(pol ~ landuse + sewer + nitrate + chloride, data=gw)
summary(lm_all1)
lm_all2 = lm(pol ~ sewer + nitrate +landuse  + chloride, data=gw)
summary(lm_all2)
anova(lm_all1)
anova(lm_all2)
model.matrix(lm_all)
levels(gw$landuse)
drop1(lm_all,test="F")
install.packages('ggplot2')
install.packages('GGally')
install.packages('scatterplot3d')
library(ggplot2)
library(GGally)
library(scatterplot3d)
str(gw)
ggpairs(data=gw,title='ground data')
View(gw)
ggpairs(data=gw,columns=4:8,title='ground data')
lm_all1 = lm(pol ~ landuse + sewer + nitrate + chloride, data=gw)
summary(lm_all1)
anova(lm_all1)
m1<-lm(formula = pol ~ sewer , data = gw)
m2<-lm(formula = pol ~ sewer +nitrate , data = gw)
m2<-lm(formula = pol ~ sewer +nitrate +landuse , data = gw)
m3<-lm(formula = pol ~ sewer +nitrate +landuse +chloride , data = gw)
setwd('E:/aa Machine Learning/Machine Learning A-Z/Part 2 - Regression/Section 4 - Simple Linear Regression')
dataset=read.csv('Salary_Data.csv')
library(caTools)
str(dataset)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
table(split)
training_set=subset(dataset,split=TRUE)
test_Set-subset(dataset,split=FALSE)
test_set=subset(dataset,split=FALSE)
regressor=lm(formula = dataset$Salary ~ dataset$YearsExperience)
regressor=lm(formula = dataset$Salary ~ dataset$YearsExperience,dataset=training_set)
regressor=lm(formula = Salary ~ YearsExperience,dataset=training_set)
head(training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
y_pred=predict(regressor,newdata = test_set)
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() + geom_point(aes())
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = test_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
dataset = read.csv('50_Startups.csv')
setwd('E:/aa Machine Learning/Machine Learning A-Z/Part 2 - Regression/Section 4 - Simple Linear Regression')
setwd('E:/aa Machine Learning/Machine Learning A-Z/Part 2 - Regression\Section 5 - Multiple Linear Regression')
setwd('E:/aa Machine Learning/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ R.D.Spend +Administration+Marketing.Spend,data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
lm(formula = Profit ~ .,data = training_set)
summary(lm(formula = Profit ~ .,data = training_set))
dataset = read.csv('50_Startups.csv')
head(dataset)
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
regressor = lm(formula = Profit ~ R.D.Spend +Administration+Marketing.Spend,data = training_set)
lm(regressor)
setwd("E:/aa Machine Learning\Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
setwd("E:/aa Machine Learning\Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
setwd("E:/aa Machine Learning/Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
head(dataset)
dataset[2,3]
dataset[2:3]
ggplot() + geom_point(mapping = aes(x=Level,y=Salary),data = dataset)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(line_reg)
summary(lin_reg)
setwd("E:/aa Machine Learning/Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
poly_reg = lm(formula = Salary ~ .,
data = dataset)
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
install.packages('h2o')
library(h20)
library(h2o)
h2o.init()
h20(init)
h2o.init()
url<='http://h2o-public-test-data.s3.amazonws.com/smalldata/iris/iris_weather.csv'
url<-'http://h2o-public-test-data.s3.amazonws.com/smalldata/iris/iris_weather.csv'
iris.importFile(url)
iris=h2o.importFile(url)
iris=h2o.importFile(url)
head(iris)
dim(iris)
parts<-h2o.splitFrame(iris,0.8)
url<-'http://h2o-public-test-data.s3.amazonaws.com/smalldata/iris/iris_weather.csv'
iris=h2o.importFile(url)
url<-'http://h2o-public-test-data.s3.amazonaws.com/smalldata/iris/iris_wheader.csv'
iris=h2o.importFile(url)
parts<-h2o.splitFrame(iris,0.8)
head(parts)
train<-parts[[1]]
test<-parts[[2]]
summary(train)
nrow(train)
dim(train)
dim(test)
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
library(repr)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages('repr')
install.packages('IRdisplay')
install.packages('evaluate')
install.packages('crayon')
install.packages("crayon")
install.packages("crayon")
install.packages("crayon")
install.packages("pbdZMQ")
install.packages("devtools")
install.packages("uuid")
install.packages("digest")
devtools::install_github('IRkernel/IRkernel')
library(h2o)
h2o.init()
summary(train)
libray(h2o)
install.packages(h2o)
install.packages('h2o')
install.packages("h2o")
libray(h2o)
library(h2o)
url<-'http://h2o-public-test-data.s3.amazonaws.com/smalldata/iris/iris_wheader.csv'
h2o.connect()
parts<-h2o.splitFrame(iris,0.8)
prats
prats
parts
summary(parts)
parts<-h2o.splitFrame(iris,0.8)
head(parts)
parts<-h2o.splitFrame(iris,0.8)
iris=h2o.importFile(url)
parts<-h2o.splitFrame(iris,0.8)
head(parts)
train<-parts[[1]]
test<-parts[[2]]
mDL<-h2o.deeplearning(1:4,5,training_frame = train)
mDL
summary(train)
mDL<-h2o.deeplearning(1:4,5,training_frame = train)
h2o.predict(mDL,test)
h20.performance(mDL,test)
h2o.performance(mDL,test)
library(H2OAutoML)
install.packages("H2OAutoML")
nA<-h2o.automl(1:4,5,train,max_runtime_secs = 30)
nA
h2o.performance(na@leader,test)
h2o.performance(Ma@leader,test)
h2o.performance(nA@leader,test)
as.data.frame(nA@leaderboard)
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec(
c\\
library(IRkernel)
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
display(comb)
